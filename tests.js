// Generated by CoffeeScript 1.6.2
(function() {
  var data;

  module("Bad Spec");

  data = polyjs.data({
    data: [
      {
        a: 2,
        b: 1
      }
    ]
  });

  test("no data", function() {
    var err;

    try {
      polyjs.chart({
        render: false,
        layers: [
          {
            type: 'point',
            x: 'x',
            y: 'y'
          }
        ]
      });
      return ok(false, 'no data to plot');
    } catch (_error) {
      err = _error;
      return deepEqual(err.name, 'DefinitionError');
    }
  });

  test("referencing unknown variable", function() {
    var err;

    try {
      polyjs.chart({
        render: false,
        layers: [
          {
            data: data,
            type: 'point',
            x: 'x',
            y: 'c'
          }
        ]
      });
      ok(false, 'referencing unknown var');
    } catch (_error) {
      err = _error;
      deepEqual(err.name, 'DefinitionError');
    }
    try {
      polyjs.chart({
        render: false,
        layers: [
          {
            data: data,
            type: 'point',
            x: 'x',
            y: 'sum(x)'
          }
        ]
      });
      ok(false, 'referencing unknown var');
    } catch (_error) {
      err = _error;
      deepEqual(err.name, 'DefinitionError');
    }
    try {
      polyjs.chart({
        render: false,
        layers: [
          {
            data: data,
            type: 'point',
            x: 'b',
            y: 'sum(a)'
          }
        ]
      });
    } catch (_error) {
      err = _error;
      ok(false, 'NOT referencing unknown var');
    }
    try {
      return polyjs.chart({
        render: false,
        layers: [
          {
            data: data,
            type: 'point',
            x: 'b',
            y: 'sum(lag(a,2))'
          }
        ]
      });
    } catch (_error) {
      err = _error;
      return ok(false, 'NOT referencing unknown var');
    }
  });

  test("no layers", function() {
    var err;

    try {
      polyjs.chart({
        render: false
      });
      ok(false, 'no layer!');
    } catch (_error) {
      err = _error;
      deepEqual(err.name, 'DefinitionError');
    }
    try {
      polyjs.chart({
        render: false,
        layers: []
      });
      ok(false, 'no layer!');
    } catch (_error) {
      err = _error;
      deepEqual(err.name, 'DefinitionError');
    }
    try {
      return polyjs.chart({
        render: false,
        layer: {
          data: data,
          type: 'point',
          x: 'a',
          y: 'b'
        }
      });
    } catch (_error) {
      err = _error;
      return ok(false, 'layer exists');
    }
  });

  test("jibberish data", function() {
    var data2, err;

    try {
      data2 = {};
      polyjs.chart({
        render: false,
        layer: {
          data: data2,
          type: 'foodish',
          x: 'a',
          y: 'b'
        }
      });
      return ok(false, 'jibberish');
    } catch (_error) {
      err = _error;
      return deepEqual(err.name, 'DefinitionError');
    }
  });

  test("jibberish layer", function() {
    var err;

    try {
      polyjs.chart({
        render: false,
        layer: {
          data: data,
          type: 'foodish',
          x: 'a',
          y: 'b'
        }
      });
      return ok(false, 'jibberish');
    } catch (_error) {
      err = _error;
      return deepEqual(err.name, 'DefinitionError');
    }
  });

}).call(this);
// Generated by CoffeeScript 1.6.2
(function() {
  var transformData;

  module("Data");

  transformData = function(data, spec) {
    data.getData(function(x) {
      return x;
    });
    return polyjs.data.frontendProcess(spec, data, function(x) {
      return x;
    });
  };

  test("smoke test", function() {
    var data, jsondata;

    jsondata = [
      {
        x: 2,
        y: 4
      }, {
        x: 2,
        y: 4
      }
    ];
    data = polyjs.data({
      data: jsondata
    });
    return deepEqual(data.raw, jsondata);
  });

  test("transforms -- numeric binning", function() {
    var data, trans;

    data = polyjs.data({
      data: [
        {
          x: 12,
          y: 42
        }, {
          x: 33,
          y: 56
        }
      ]
    });
    trans = transformData(data, {
      trans: [
        {
          key: 'x',
          trans: "bin",
          binwidth: 10,
          name: "bin(x, 10)"
        }, {
          key: 'y',
          trans: "bin",
          binwidth: 5,
          name: "bin(y, 5)"
        }
      ]
    });
    deepEqual(trans.data, [
      {
        x: 12,
        y: 42,
        'bin(x, 10)': 10,
        'bin(y, 5)': 40
      }, {
        x: 33,
        y: 56,
        'bin(x, 10)': 30,
        'bin(y, 5)': 55
      }
    ]);
    data = polyjs.data({
      data: [
        {
          x: 1.2,
          y: 1
        }, {
          x: 3.3,
          y: 2
        }, {
          x: 3.3,
          y: 3
        }
      ]
    });
    trans = transformData(data, {
      trans: [
        {
          key: 'x',
          trans: "bin",
          binwidth: 1,
          name: "bin(x, 1)"
        }, {
          key: 'y',
          trans: "lag",
          lag: 1,
          name: "lag(y, 1)"
        }
      ]
    });
    deepEqual(trans.data, [
      {
        x: 1.2,
        y: 1,
        'bin(x, 1)': 1,
        'lag(y, 1)': void 0
      }, {
        x: 3.3,
        y: 2,
        'bin(x, 1)': 3,
        'lag(y, 1)': 1
      }, {
        x: 3.3,
        y: 3,
        'bin(x, 1)': 3,
        'lag(y, 1)': 2
      }
    ]);
    data = polyjs.data({
      data: [
        {
          x: 1.2,
          y: 1
        }, {
          x: 3.3,
          y: 2
        }, {
          x: 3.3,
          y: 3
        }
      ]
    });
    trans = transformData(data, {
      trans: [
        {
          key: 'x',
          trans: "bin",
          binwidth: 1,
          name: "bin(x, 1)"
        }, {
          key: 'y',
          trans: "lag",
          lag: 2,
          name: "lag(y, 2)"
        }
      ]
    });
    return deepEqual(trans.data, [
      {
        x: 1.2,
        y: 1,
        'bin(x, 1)': 1,
        'lag(y, 2)': void 0
      }, {
        x: 3.3,
        y: 2,
        'bin(x, 1)': 3,
        'lag(y, 2)': void 0
      }, {
        x: 3.3,
        y: 3,
        'bin(x, 1)': 3,
        'lag(y, 2)': 1
      }
    ]);
  });

  test("transforms -- dates binning", function() {});

  test("filtering", function() {
    var data, trans;

    data = polyjs.data({
      data: [
        {
          x: 1.2,
          y: 1
        }, {
          x: 3.3,
          y: 2
        }, {
          x: 3.4,
          y: 3
        }
      ]
    });
    trans = transformData(data, {
      trans: [
        {
          key: 'x',
          trans: "bin",
          binwidth: 1,
          name: "bin(x, 1)"
        }, {
          key: 'y',
          trans: "lag",
          lag: 1,
          name: "lag(y, 1)"
        }
      ],
      filter: {
        x: {
          lt: 3
        }
      }
    });
    deepEqual(trans.data, [
      {
        x: 1.2,
        y: 1,
        'bin(x, 1)': 1,
        'lag(y, 1)': void 0
      }
    ]);
    trans = transformData(data, {
      trans: [
        {
          key: 'x',
          trans: "bin",
          binwidth: 1,
          name: "bin(x, 1)"
        }, {
          key: 'y',
          trans: "lag",
          lag: 1,
          name: "lag(y, 1)"
        }
      ],
      filter: {
        x: {
          lt: 3.35,
          gt: 1.2
        }
      }
    });
    deepEqual(trans.data, [
      {
        x: 3.3,
        y: 2,
        'bin(x, 1)': 3,
        'lag(y, 1)': 1
      }
    ]);
    trans = transformData(data, {
      trans: [
        {
          key: 'x',
          trans: "bin",
          binwidth: 1,
          name: "bin(x, 1)"
        }, {
          key: 'y',
          trans: "lag",
          lag: 1,
          name: "lag(y, 1)"
        }
      ],
      filter: {
        x: {
          le: 3.35,
          ge: 1.2
        },
        y: {
          lt: 100
        }
      }
    });
    deepEqual(trans.data, [
      {
        x: 1.2,
        y: 1,
        'bin(x, 1)': 1,
        'lag(y, 1)': void 0
      }, {
        x: 3.3,
        y: 2,
        'bin(x, 1)': 3,
        'lag(y, 1)': 1
      }
    ]);
    data = polyjs.data({
      data: [
        {
          x: 1.2,
          y: 1,
          z: 'A'
        }, {
          x: 3.3,
          y: 2,
          z: 'B'
        }, {
          x: 3.4,
          y: 3,
          z: 'B'
        }
      ]
    });
    trans = transformData(data, {
      filter: {
        z: {
          "in": 'B'
        }
      }
    });
    deepEqual(trans.data, [
      {
        x: 3.3,
        y: 2,
        z: 'B'
      }, {
        x: 3.4,
        y: 3,
        z: 'B'
      }
    ]);
    trans = transformData(data, {
      filter: {
        z: {
          "in": ['A', 'B']
        }
      }
    });
    return deepEqual(trans.data, [
      {
        x: 1.2,
        y: 1,
        z: 'A'
      }, {
        x: 3.3,
        y: 2,
        z: 'B'
      }, {
        x: 3.4,
        y: 3,
        z: 'B'
      }
    ]);
  });

  test("statistics - count", function() {
    var data, trans;

    data = polyjs.data({
      data: [
        {
          x: 'A',
          y: 1,
          z: 1
        }, {
          x: 'A',
          y: 1,
          z: 2
        }, {
          x: 'A',
          y: 1,
          z: 1
        }, {
          x: 'A',
          y: 1,
          z: 2
        }, {
          x: 'A',
          y: 1,
          z: 1
        }, {
          x: 'A',
          y: 1,
          z: 2
        }, {
          x: 'B',
          y: 1,
          z: 1
        }, {
          x: 'B',
          y: 1,
          z: 2
        }, {
          x: 'B',
          y: 1,
          z: 1
        }, {
          x: 'B',
          y: 1,
          z: 2
        }, {
          x: 'B',
          y: void 0,
          z: 1
        }, {
          x: 'B',
          y: null,
          z: 2
        }
      ]
    });
    trans = transformData(data, {
      stats: {
        stats: [
          {
            key: 'y',
            stat: 'count',
            name: 'count(y)'
          }
        ],
        groups: ['x']
      }
    });
    deepEqual(trans.data, [
      {
        x: 'A',
        'count(y)': 6
      }, {
        x: 'B',
        'count(y)': 4
      }
    ]);
    trans = transformData(data, {
      stats: {
        stats: [
          {
            key: 'y',
            stat: 'count',
            name: 'count(y)'
          }
        ],
        groups: ['x', 'z']
      }
    });
    deepEqual(trans.data, [
      {
        x: 'A',
        z: 1,
        'count(y)': 3
      }, {
        x: 'A',
        z: 2,
        'count(y)': 3
      }, {
        x: 'B',
        z: 1,
        'count(y)': 2
      }, {
        x: 'B',
        z: 2,
        'count(y)': 2
      }
    ]);
    trans = transformData(data, {
      stats: {
        stats: [
          {
            key: 'y',
            stat: 'unique',
            name: 'unique(y)'
          }
        ],
        groups: ['x', 'z']
      }
    });
    deepEqual(trans.data, [
      {
        x: 'A',
        z: 1,
        'unique(y)': 1
      }, {
        x: 'A',
        z: 2,
        'unique(y)': 1
      }, {
        x: 'B',
        z: 1,
        'unique(y)': 1
      }, {
        x: 'B',
        z: 2,
        'unique(y)': 1
      }
    ]);
    trans = transformData(data, {
      stats: {
        stats: [
          {
            key: 'y',
            stat: 'count',
            name: 'count(y)'
          }, {
            key: 'y',
            stat: 'unique',
            name: 'unique(y)'
          }
        ],
        groups: ['x', 'z']
      }
    });
    deepEqual(trans.data, [
      {
        x: 'A',
        z: 1,
        'count(y)': 3,
        'unique(y)': 1
      }, {
        x: 'A',
        z: 2,
        'count(y)': 3,
        'unique(y)': 1
      }, {
        x: 'B',
        z: 1,
        'count(y)': 2,
        'unique(y)': 1
      }, {
        x: 'B',
        z: 2,
        'count(y)': 2,
        'unique(y)': 1
      }
    ]);
    data = polyjs.data({
      data: [
        {
          x: 'A',
          y: 1,
          z: 1
        }, {
          x: 'A',
          y: 2,
          z: 2
        }, {
          x: 'A',
          y: 3,
          z: 1
        }, {
          x: 'A',
          y: 4,
          z: 2
        }, {
          x: 'A',
          y: 5,
          z: 1
        }, {
          x: 'B',
          y: 1,
          z: 1
        }, {
          x: 'B',
          y: 2,
          z: 2
        }, {
          x: 'B',
          y: 3,
          z: 1
        }, {
          x: 'B',
          y: 4,
          z: 2
        }
      ]
    });
    trans = transformData(data, {
      stats: {
        stats: [
          {
            key: 'y',
            stat: 'min',
            name: 'min(y)'
          }, {
            key: 'y',
            stat: 'max',
            name: 'max(y)'
          }, {
            key: 'y',
            stat: 'median',
            name: 'median(y)'
          }
        ],
        groups: ['x']
      }
    });
    deepEqual(trans.data, [
      {
        x: 'A',
        'min(y)': 1,
        'max(y)': 5,
        'median(y)': 3
      }, {
        x: 'B',
        'min(y)': 1,
        'max(y)': 4,
        'median(y)': 2.5
      }
    ]);
    data = polyjs.data({
      data: [
        {
          x: 'A',
          y: 15,
          z: 1
        }, {
          x: 'A',
          y: 3,
          z: 2
        }, {
          x: 'A',
          y: 4,
          z: 1
        }, {
          x: 'A',
          y: 1,
          z: 2
        }, {
          x: 'A',
          y: 2,
          z: 1
        }, {
          x: 'A',
          y: 6,
          z: 2
        }, {
          x: 'A',
          y: 5,
          z: 1
        }, {
          x: 'B',
          y: 1,
          z: 1
        }, {
          x: 'B',
          y: 2,
          z: 2
        }, {
          x: 'B',
          y: 3,
          z: 1
        }, {
          x: 'B',
          y: 4,
          z: 2
        }
      ]
    });
    trans = transformData(data, {
      stats: {
        stats: [
          {
            key: 'y',
            stat: 'box',
            name: 'box(y)'
          }
        ],
        groups: ['x']
      }
    });
    return deepEqual(trans.data, [
      {
        x: 'A',
        'box(y)': {
          q1: 1,
          q2: 2.5,
          q3: 4,
          q4: 5.5,
          q5: 6,
          outliers: [15]
        }
      }, {
        x: 'B',
        'box(y)': {
          outliers: [1, 2, 3, 4]
        }
      }
    ]);
  });

  test("meta sorting", function() {
    var data, trans;

    data = polyjs.data({
      data: [
        {
          x: 'A',
          y: 3
        }, {
          x: 'B',
          y: 1
        }, {
          x: 'C',
          y: 2
        }
      ]
    });
    trans = transformData(data, {
      meta: {
        x: {
          sort: 'y',
          asc: true
        }
      }
    });
    deepEqual(_.pluck(trans.data, 'x'), ['B', 'C', 'A']);
    trans = transformData(data, {
      meta: {
        x: {
          sort: 'y',
          asc: true,
          limit: 2
        }
      }
    });
    deepEqual(_.pluck(trans.data, 'x'), ['B', 'C']);
    trans = transformData(data, {
      meta: {
        x: {
          sort: 'y',
          asc: false,
          limit: 1
        }
      }
    });
    deepEqual(_.pluck(trans.data, 'x'), ['A']);
    data = polyjs.data({
      data: [
        {
          x: 'A',
          y: 3
        }, {
          x: 'B',
          y: 1
        }, {
          x: 'C',
          y: 2
        }, {
          x: 'C',
          y: 2
        }
      ]
    });
    trans = transformData(data, {
      meta: {
        x: {
          sort: 'sum(y)',
          stat: {
            key: 'y',
            stat: 'sum',
            name: 'sum(y)'
          },
          asc: false,
          limit: 1
        }
      }
    });
    deepEqual(_.pluck(trans.data, 'x'), ['C', 'C']);
    data = polyjs.data({
      data: [
        {
          x: 'A',
          y: 3
        }, {
          x: 'B',
          y: 1
        }, {
          x: 'C',
          y: 2
        }, {
          x: 'C',
          y: 2
        }
      ]
    });
    trans = transformData(data, {
      meta: {
        x: {
          sort: 'sum(y)',
          stat: {
            key: 'y',
            stat: 'sum',
            name: 'sum(y)'
          },
          asc: true,
          limit: 1
        }
      }
    });
    return deepEqual(_.pluck(trans.data, 'x'), ['B']);
  });

}).call(this);
// Generated by CoffeeScript 1.6.2
(function() {
  var data, jsondata, sampleLayer;

  module("Guides");

  jsondata = [
    {
      x: 2,
      y: 1
    }, {
      x: 3,
      y: 3
    }
  ];

  data = polyjs.debug.data({
    data: jsondata
  });

  sampleLayer = {
    data: data,
    type: 'point',
    x: 'x',
    y: 'y'
  };

  test("domain: strict mode num & cat", function() {
    var domains, graph, spec, xticks, yticks;

    spec = {
      render: false,
      layers: [sampleLayer],
      strict: true,
      guides: {
        x: {
          type: 'num',
          min: 2,
          max: 4,
          bw: 3
        },
        y: {
          type: 'cat',
          levels: [1, 2, 3],
          labels: {
            1: 'One',
            2: 'Five'
          }
        }
      }
    };
    graph = polyjs.debug.chart(spec);
    domains = graph.facet.panes[""].domains;
    equal(domains.x.type, 'num');
    equal(domains.x.min, 2);
    equal(domains.x.max, 4);
    equal(domains.x.bw, 3);
    equal(domains.y.type, 'cat');
    deepEqual(domains.y.levels, [1, 2, 3]);
    equal(domains.y.sorted, false);
    xticks = graph.scaleSet.axes.axes.x.ticks;
    yticks = graph.scaleSet.axes.axes.y.ticks;
    deepEqual(_.pluck(xticks, 'location'), [2, 2.5, 3, 3.5]);
    deepEqual(_.pluck(yticks, 'location'), [3, 1, 2]);
    return deepEqual(_.pluck(yticks, 'value'), [3, 'One', 'Five']);
  });

  test("scale: x and v:", function() {
    var domains, graph, spec;

    spec = {
      render: false,
      layers: [sampleLayer],
      strict: true,
      guides: {
        x: {
          type: 'num',
          min: 2,
          max: 4,
          bw: 3
        },
        y: {
          type: 'num',
          min: 1,
          max: 3
        }
      }
    };
    graph = polyjs.debug.chart(spec);
    domains = graph.facet.panes[""].domains;
    equal(domains.x.type, 'num');
    equal(domains.x.min, 2);
    equal(domains.x.max, 4);
    equal(domains.x.bw, 3);
    equal(domains.y.type, 'num');
    equal(domains.y.min, 1);
    return equal(domains.y.max, 3);
  });

  /*
    equal scales.x(2), 0+30
    equal scales.x(3), 150+30
    equal scales.x(4), 300+30
    equal scales.y(3), 0+20
    equal scales.y(2), 150+20
    equal scales.y(1), 300+20
  */


}).call(this);
// Generated by CoffeeScript 1.6.2
(function() {
  module("Layer");

  test("point", function() {
    var data, graph, jsondata, layer, spec;

    jsondata = [
      {
        x: 2,
        y: 4
      }, {
        x: 3,
        y: 3
      }
    ];
    data = polyjs.debug.data({
      data: jsondata
    });
    spec = {
      render: false,
      layers: [
        {
          data: data,
          type: 'point',
          x: 'x',
          y: 'y'
        }
      ]
    };
    graph = polyjs.debug.chart(spec);
    layer = graph.facet.panes[""].layers[0];
    equal(layer.geoms[0].marks[0].type, 'circle');
    equal(layer.geoms[0].marks[0].x, 2);
    equal(layer.geoms[0].marks[0].y, 4);
    deepEqual(layer.geoms[0].marks[0].color, polyjs.debug["const"].scaleFns.identity(layer.defaults.color));
    deepEqual(layer.geoms[0].evtData.x["in"], [2]);
    deepEqual(layer.geoms[0].evtData.y["in"], [4]);
    equal(layer.geoms[1].marks[0].type, 'circle');
    equal(layer.geoms[1].marks[0].x, 3);
    equal(layer.geoms[1].marks[0].y, 3);
    deepEqual(layer.geoms[1].marks[0].color, polyjs.debug["const"].scaleFns.identity(layer.defaults.color));
    deepEqual(layer.geoms[1].evtData.x["in"], [3]);
    return deepEqual(layer.geoms[1].evtData.y["in"], [3]);
  });

  test("lines", function() {
    var data, graph, jsondata, layer, spec;

    jsondata = [
      {
        x: 2,
        y: 4
      }, {
        x: 3,
        y: 3
      }
    ];
    data = polyjs.debug.data({
      data: jsondata
    });
    spec = {
      render: false,
      layers: [
        {
          data: data,
          type: 'line',
          x: 'x',
          y: 'y'
        }
      ]
    };
    graph = polyjs.debug.chart(spec);
    layer = graph.facet.panes[""].layers[0];
    equal(layer.geoms[0].marks[0].type, 'line');
    deepEqual(layer.geoms[0].marks[0].x, [2, 3]);
    deepEqual(layer.geoms[0].marks[0].y, [4, 3]);
    deepEqual(layer.geoms[0].marks[0].color, polyjs.debug["const"].scaleFns.identity(layer.defaults.color));
    deepEqual(layer.geoms[0].evtData, {});
    jsondata = [
      {
        x: 2,
        y: 4,
        z: 'A'
      }, {
        x: 3,
        y: 3,
        z: 'A'
      }, {
        x: 1,
        y: 4,
        z: 2
      }, {
        x: 5,
        y: 3,
        z: 2
      }
    ];
    data = polyjs.debug.data({
      data: jsondata
    });
    spec = {
      render: false,
      layers: [
        {
          data: data,
          type: 'line',
          x: 'x',
          y: 'y',
          color: 'z'
        }
      ]
    };
    graph = polyjs.debug.chart(spec);
    layer = graph.facet.panes[""].layers[0];
    equal(layer.geoms[0].marks[0].type, 'line');
    deepEqual(layer.geoms[0].marks[0].x, [2, 3, 1, 5]);
    deepEqual(layer.geoms[0].marks[0].y, [4, 3, 0, 0]);
    deepEqual(layer.geoms[0].marks[0].color, 'A');
    deepEqual(layer.geoms[0].evtData.z["in"], ['A']);
    deepEqual(layer.geoms[1].marks[0].x, [1, 5, 2, 3]);
    deepEqual(layer.geoms[1].marks[0].y, [4, 3, 0, 0]);
    deepEqual(layer.geoms[1].marks[0].color, 2);
    return deepEqual(layer.geoms[1].evtData.z["in"], [2]);
  });

  test("bars", function() {
    var data, graph, jsondata, layer, spec;

    jsondata = [
      {
        x: 'A',
        y: 4,
        z: 'foo'
      }, {
        x: 'A',
        y: 3,
        z: 'bar'
      }
    ];
    data = polyjs.debug.data({
      data: jsondata
    });
    spec = {
      render: false,
      layers: [
        {
          data: data,
          type: 'bar',
          x: 'x',
          y: 'y',
          id: 'z'
        }
      ]
    };
    graph = polyjs.debug.chart(spec);
    layer = graph.facet.panes[""].layers[0];
    equal(layer.geoms['foo'].marks[0].type, 'rect');
    deepEqual(layer.geoms['foo'].marks[0].x[0], polyjs.debug["const"].scaleFns.lower('A'));
    deepEqual(layer.geoms['foo'].marks[0].x[1], polyjs.debug["const"].scaleFns.upper('A'));
    equal(layer.geoms['foo'].marks[0].y[0], 0);
    equal(layer.geoms['foo'].marks[0].y[1], 4);
    equal(layer.geoms['bar'].marks[0].type, 'rect');
    deepEqual(layer.geoms['bar'].marks[0].x[0], polyjs.debug["const"].scaleFns.lower('A'));
    deepEqual(layer.geoms['bar'].marks[0].x[1], polyjs.debug["const"].scaleFns.upper('A'));
    equal(layer.geoms['bar'].marks[0].y[0], 4);
    return equal(layer.geoms['bar'].marks[0].y[1], 7);
  });

}).call(this);
// Generated by CoffeeScript 1.6.2
(function() {
  module("parsers");

  test("expressions", function() {
    var e;

    equal(polyjs.debug.parser.tokenize('A').toString(), '<symbol,A>');
    equal(polyjs.debug.parser.parse('A').toString(), 'Ident(A)');
    equal(polyjs.debug.parser.tokenize('  A').toString(), '<symbol,A>');
    equal(polyjs.debug.parser.parse('  A').toString(), 'Ident(A)');
    equal(polyjs.debug.parser.tokenize('3.3445').toString(), '<literal,3.3445>');
    equal(polyjs.debug.parser.parse('3.3445').toString(), 'Const(3.3445)');
    equal(polyjs.debug.parser.tokenize('mean(A )').toString(), '<symbol,mean>,<(>,<symbol,A>,<)>');
    equal(polyjs.debug.parser.parse('mean(A )').toString(), 'Call(mean,[Ident(A)])');
    equal(polyjs.debug.parser.tokenize(' mean(A )').toString(), '<symbol,mean>,<(>,<symbol,A>,<)>');
    equal(polyjs.debug.parser.parse('mean(A )').toString(), 'Call(mean,[Ident(A)])');
    equal(polyjs.debug.parser.tokenize('mean( A )  ').toString(), '<symbol,mean>,<(>,<symbol,A>,<)>');
    equal(polyjs.debug.parser.parse('mean( A )  ').toString(), 'Call(mean,[Ident(A)])');
    equal(polyjs.debug.parser.tokenize('log(mean(sum(A_0), 10), 2.7188, CCC)').toString(), '<symbol,log>,<(>,<symbol,mean>,<(>,<symbol,sum>,<(>,<symbol,A_0>,<)>,<,>,<literal,10>,<)>,<,>,<literal,2.7188>,<,>,<symbol,CCC>,<)>');
    equal(polyjs.debug.parser.parse('log(mean(sum(A_0), 10), 2.7188, CCC)').toString(), 'Call(log,[Call(mean,[Call(sum,[Ident(A_0)]),Const(10)]),Const(2.7188),Ident(CCC)])');
    equal(polyjs.debug.parser.tokenize('this(should, break').toString(), '<symbol,this>,<(>,<symbol,should>,<,>,<symbol,break>');
    try {
      polyjs.debug.parser.parse('this(should, break').toString();
      ok(false, 'this(should, break');
    } catch (_error) {
      e = _error;
      equal(e.message, 'There is an error in your specification at Stream([])');
    }
    try {
      polyjs.debug.parser.parse(')this(should, break').toString();
      ok(false, ')this(should, break');
    } catch (_error) {
      e = _error;
      equal(e.message, 'There is an error in your specification at Stream([<)>,<symbol,this>,<(>,<symbol,should>,<,>,<symbol,break>])');
    }
    try {
      polyjs.debug.parser.parse('this should break').toString();
      return ok(false, 'this should break');
    } catch (_error) {
      e = _error;
      return equal(e.message, "There is an error in your specification at Stream([<symbol,should>,<symbol,break>])");
    }
  });

  test("extraction: nothing (smoke test)", function() {
    var layerparser, parser;

    layerparser = {
      type: "point",
      y: {
        "var": "b"
      },
      x: {
        "var": "a"
      },
      color: {
        "const": "blue"
      },
      opacity: {
        "var": "c"
      }
    };
    parser = polyjs.debug.parser.layerToData(layerparser);
    deepEqual(parser.filter, {});
    deepEqual(parser.meta, {});
    deepEqual(parser.select, ['a', 'b', 'c']);
    deepEqual(parser.stats.stats, []);
    return deepEqual(parser.trans, []);
  });

  test("extraction: simple, one stat (smoke test)", function() {
    debugger;
    var layerparser, parser;

    layerparser = {
      type: "point",
      x: {
        "var": "a"
      },
      y: {
        "var": "sum(b)"
      }
    };
    parser = polyjs.debug.parser.layerToData(layerparser);
    deepEqual(parser.filter, {});
    deepEqual(parser.meta, {});
    deepEqual(parser.select, ['a', 'sum(b)']);
    deepEqual(parser.stats.stats, [
      {
        key: 'b',
        stat: 'sum',
        name: 'sum(b)'
      }
    ]);
    deepEqual(parser.stats.groups, ['a']);
    return deepEqual(parser.trans, []);
  });

  test("extraction: stats", function() {
    var layerparser, parser;

    layerparser = {
      type: "point",
      y: {
        "var": "b",
        sort: "a",
        guide: "y2"
      },
      x: {
        "var": "a"
      },
      color: {
        "const": "blue"
      },
      opacity: {
        "var": "sum(c)"
      },
      filter: {
        a: {
          gt: 0,
          lt: 100
        }
      }
    };
    parser = polyjs.debug.parser.layerToData(layerparser);
    deepEqual(parser.filter, layerparser.filter);
    deepEqual(parser.meta, {
      b: {
        sort: 'a',
        asc: false
      }
    });
    deepEqual(parser.select, ['a', 'b', 'sum(c)']);
    deepEqual(parser.stats.groups, ['a', 'b']);
    deepEqual(parser.stats.stats, [
      {
        key: 'c',
        name: 'sum(c)',
        stat: 'sum'
      }
    ]);
    return deepEqual(parser.trans, []);
  });

  test("extraction: transforms", function() {
    var layerparser, parser;

    layerparser = {
      type: "point",
      y: {
        "var": "b",
        sort: "a",
        guide: "y2"
      },
      x: {
        "var": "lag(a, 1)"
      },
      color: {
        "const": "blue"
      },
      opacity: {
        "var": "sum(c)"
      },
      filter: {
        a: {
          gt: 0,
          lt: 100
        }
      }
    };
    parser = polyjs.debug.parser.layerToData(layerparser);
    deepEqual(parser.filter, layerparser.filter);
    deepEqual(parser.meta, {
      b: {
        sort: 'a',
        asc: false
      }
    });
    deepEqual(parser.select, ['lag(a,1)', 'b', 'sum(c)']);
    deepEqual(parser.stats.groups, ['lag(a,1)', 'b']);
    deepEqual(parser.stats.stats, [
      {
        key: 'c',
        name: 'sum(c)',
        stat: 'sum'
      }
    ]);
    deepEqual(parser.trans, [
      {
        key: 'a',
        lag: '1',
        name: 'lag(a,1)',
        trans: 'lag'
      }
    ]);
    layerparser = {
      type: "point",
      y: {
        "var": "b",
        sort: "a",
        guide: "y2",
        asc: true
      },
      x: {
        "var": "bin(a, 1)"
      },
      color: {
        "const": "blue"
      },
      opacity: {
        "var": "sum(c)"
      },
      filter: {
        a: {
          gt: 0,
          lt: 100
        }
      }
    };
    parser = polyjs.debug.parser.layerToData(layerparser);
    deepEqual(parser.filter, layerparser.filter);
    deepEqual(parser.meta, {
      b: {
        sort: 'a',
        asc: true
      }
    });
    deepEqual(parser.select, ['bin(a,1)', 'b', 'sum(c)']);
    deepEqual(parser.stats.groups, ['bin(a,1)', 'b']);
    deepEqual(parser.stats.stats, [
      {
        key: 'c',
        name: 'sum(c)',
        stat: 'sum'
      }
    ]);
    deepEqual(parser.trans, [
      {
        key: 'a',
        binwidth: '1',
        name: 'bin(a,1)',
        trans: 'bin'
      }
    ]);
    layerparser = {
      type: "point",
      y: {
        "var": "lag(c , -0xaF1) "
      },
      x: {
        "var": "bin(a, 0.10)"
      },
      color: {
        "var": "mean(lag(c,0))"
      },
      opacity: {
        "var": "bin(a, 10)"
      }
    };
    parser = polyjs.debug.parser.layerToData(layerparser);
    deepEqual(parser.select, ["bin(a,0.10)", "lag(c,-0xaF1)", "mean(lag(c,0))", "bin(a,10)"]);
    deepEqual(parser.stats.groups, ["bin(a,0.10)", "lag(c,-0xaF1)", "bin(a,10)"]);
    deepEqual(parser.stats.stats, [
      {
        key: "lag(c,0)",
        name: "mean(lag(c,0))",
        stat: "mean"
      }
    ]);
    return deepEqual(parser.trans, [
      {
        "key": "a",
        "binwidth": "10",
        "name": "bin(a,10)",
        "trans": "bin"
      }, {
        "key": "c",
        "lag": "0",
        "name": "lag(c,0)",
        "trans": "lag"
      }, {
        "key": "c",
        "lag": "-0xaF1",
        "name": "lag(c,-0xaF1)",
        "trans": "lag"
      }, {
        "key": "a",
        "binwidth": "0.10",
        "name": "bin(a,0.10)",
        "trans": "bin"
      }
    ]);
  });

  test("extraction: UTF8", function() {
    var layerparser, parser;

    layerparser = {
      type: "point",
      y: {
        "var": "lag(',f+/\\\'c' , -1) "
      },
      x: {
        "var": "bin(汉字漢字, 10.4e20)"
      },
      color: {
        "var": "mean(lag(c, -1))"
      },
      opacity: {
        "var": "bin(\"a-+->\\\"b\", '漢\\\'字')"
      }
    };
    parser = polyjs.debug.parser.layerToData(layerparser);
    return deepEqual(parser.select, ["bin(汉字漢字,10.4e20", "lag(',f+/\\\'c',-1", "mean(lag(c,-1))", "bin(\"a-+->\\\"b\", '漢\\\'字')"]);
  });

}).call(this);
// Generated by CoffeeScript 1.6.2
(function() {
  module("Utils");

  test("median", function() {
    deepEqual(polyjs.debug.median([1]), 1);
    deepEqual(polyjs.debug.median([5, 2, 3, 4, 1]), 3);
    deepEqual(polyjs.debug.median([1, 3, 2, 4]), 2.5);
    deepEqual(polyjs.debug.median([-1, -2, -3], true), -2);
    return deepEqual(polyjs.debug.median([-1.5, 10], true), 4.25);
  });

  test("linear", function() {
    deepEqual(polyjs.debug.linear(1, 1, 2, 2)(3), 3);
    deepEqual(polyjs.debug.linear(1, 2, 3, 2)(5), 2);
    deepEqual(polyjs.debug.linear(2, 5, 4, 0)(6), -5);
    deepEqual(polyjs.debug.linear(1, 1.5, 2, 3)(3), 4.5);
    deepEqual(polyjs.debug.linear(1, 3, 1, 6)(0), -Infinity);
    return deepEqual(polyjs.debug.linear(2, 3, 2, 3)(2), NaN);
  });

  test("compare", function() {
    deepEqual(polyjs.debug.compare([], []), {
      deleted: [],
      kept: [],
      added: []
    });
    deepEqual(polyjs.debug.compare([1, 2], []), {
      deleted: [1, 2],
      kept: [],
      added: []
    });
    deepEqual(polyjs.debug.compare([], [1, 2]), {
      deleted: [],
      kept: [],
      added: [1, 2]
    });
    deepEqual(polyjs.debug.compare([1, 2, 3], [1, 2, 3]), {
      deleted: [],
      kept: [1, 2, 3],
      added: []
    });
    deepEqual(polyjs.debug.compare([1, 2, 3], [3, 4, 5]), {
      deleted: [1, 2],
      kept: [3],
      added: [4, 5]
    });
    deepEqual(polyjs.debug.compare([1, 2, 3], [1, 2, 3, 4, 5, 6]), {
      deleted: [],
      kept: [1, 2, 3],
      added: [4, 5, 6]
    });
    deepEqual(polyjs.debug.compare([1, 2, 3, 4, 5, 6], [1, 2, 3]), {
      deleted: [4, 5, 6],
      kept: [1, 2, 3],
      added: []
    });
    return deepEqual(polyjs.debug.compare(['A', 'B', 'C'], ['B', 'D']), {
      deleted: ['A', 'C'],
      kept: ['B'],
      added: ['D']
    });
  });

  test("sample", function() {
    var x, y;

    x = {
      a: 2,
      b: 3,
      c: 4,
      d: 5,
      e: 7,
      f: 8,
      g: 9
    };
    y = polyjs.debug.sample(x, 3);
    equal(_.size(y), 3);
    y = polyjs.debug.sample(x, 5);
    equal(_.size(y), 5);
    y = polyjs.debug.sample(x, 100);
    return equal(_.size(y), _.size(x));
  });

  test("flatten", function() {
    deepEqual(polyjs.debug.flatten(null), []);
    deepEqual(polyjs.debug.flatten(2), [2]);
    deepEqual(polyjs.debug.flatten({
      't': 'scalefn',
      'v': 2
    }), [2]);
    deepEqual(polyjs.debug.flatten([
      {
        't': 'scalefn',
        'v': 2
      }, {
        't': 'scalefn',
        'v': 4
      }
    ]), [2, 4]);
    deepEqual(polyjs.debug.flatten([1, 2, 3, 4]), [1, 2, 3, 4]);
    deepEqual(polyjs.debug.flatten([2, 3, [2, 4]]), [2, 3, 2, 4]);
    deepEqual(polyjs.debug.flatten([2, 3, [2, 4]]), [2, 3, 2, 4]);
    deepEqual(polyjs.debug.flatten({
      'a': 2,
      'b': 3
    }), [2, 3]);
    return deepEqual(polyjs.debug.flatten({
      'a': [2, 3, 4],
      'b': 3
    }), [2, 3, 4, 3]);
  });

  test("strSize", function() {
    deepEqual(polyjs.debug.strSize(''), 0);
    deepEqual(polyjs.debug.strSize('a'), 6);
    deepEqual(polyjs.debug.strSize('   '), 18);
    deepEqual(polyjs.debug.strSize('foo bar'), 42);
    return deepEqual(polyjs.debug.strSize('\'"'), 12);
  });

  test("sortArrays", function() {
    var numcomp, sincomp;

    numcomp = polyjs.debug.type.compare('num');
    sincomp = function(a, b) {
      return numcomp(Math.sin(a), Math.sin(b));
    };
    deepEqual(polyjs.debug.sortArrays(numcomp, [[1, 2, 3], [1, 2, 3]]), [[1, 2, 3], [1, 2, 3]]);
    return deepEqual(polyjs.debug.sortArrays(sincomp, [[1, 2, 3], [4, 5, 6]]), [[3, 1, 2], [6, 4, 5]]);
  });

  test("type.impute", function() {
    deepEqual(polyjs.debug.type.impute([]), 'cat');
    deepEqual(polyjs.debug.type.impute(['3', 4]), 'num');
    deepEqual(polyjs.debug.type.impute(['1900-01-03']), 'date');
    deepEqual(polyjs.debug.type.impute(['1', '$2', '3,125', '$2,000']), 'num');
    deepEqual(polyjs.debug.type.impute([0, 1, 2, 3, 4, 5, 6, '1900-01-03', 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), 'num');
    return deepEqual(polyjs.debug.type.impute([0, 1, 2, 3, 4, 5, '1900-01-03', 6, 7, 8]), 'date');
  });

  test("groupProcessedData", function() {
    var data, result;

    data = {
      1: {
        statData: [
          {
            x: 1,
            b: 'A'
          }, {
            x: 1,
            b: 'A'
          }, {
            x: 1,
            b: 'B'
          }
        ],
        metaData: {
          x: {
            type: 'num'
          },
          b: {
            type: 'cat'
          }
        }
      }
    };
    result = polyjs.debug.groupProcessedData(data, []);
    deepEqual(result, data);
    result = polyjs.debug.groupProcessedData(data, ['b']);
    deepEqual(result, {
      grouped: true,
      key: 'b',
      values: {
        A: {
          1: {
            metaData: data[1].metaData,
            statData: [
              {
                x: 1,
                b: 'A'
              }, {
                x: 1,
                b: 'A'
              }
            ]
          }
        },
        B: {
          1: {
            metaData: data[1].metaData,
            statData: [
              {
                x: 1,
                b: 'B'
              }
            ]
          }
        }
      }
    });
    data = {
      1: {
        statData: [
          {
            x: 1,
            b: 'A'
          }, {
            x: 1,
            b: 'A'
          }, {
            x: 1,
            b: 'B'
          }
        ],
        metaData: {
          x: {
            type: 'num'
          },
          b: {
            type: 'cat'
          }
        }
      },
      2: {
        statData: [
          {
            y: 1,
            b: 'A'
          }, {
            y: 1,
            b: 'A'
          }, {
            y: 2,
            b: 'B'
          }
        ],
        metaData: {
          y: {
            type: 'num'
          },
          b: {
            type: 'cat'
          }
        }
      }
    };
    result = polyjs.debug.groupProcessedData(data, []);
    deepEqual(result, data);
    result = polyjs.debug.groupProcessedData(data, ['b']);
    deepEqual(result, {
      grouped: true,
      key: 'b',
      values: {
        A: {
          1: {
            metaData: data[1].metaData,
            statData: [
              {
                x: 1,
                b: 'A'
              }, {
                x: 1,
                b: 'A'
              }
            ]
          },
          2: {
            metaData: data[2].metaData,
            statData: [
              {
                y: 1,
                b: 'A'
              }, {
                y: 1,
                b: 'A'
              }
            ]
          }
        },
        B: {
          1: {
            metaData: data[1].metaData,
            statData: [
              {
                x: 1,
                b: 'B'
              }
            ]
          },
          2: {
            metaData: data[2].metaData,
            statData: [
              {
                y: 2,
                b: 'B'
              }
            ]
          }
        }
      }
    });
    result = polyjs.debug.groupProcessedData(data, ['y']);
    deepEqual(result, {
      grouped: true,
      key: 'y',
      values: {
        1: {
          1: data[1],
          2: {
            metaData: data[2].metaData,
            statData: [
              {
                y: 1,
                b: 'A'
              }, {
                y: 1,
                b: 'A'
              }
            ]
          }
        },
        2: {
          1: data[1],
          2: {
            metaData: data[2].metaData,
            statData: [
              {
                y: 2,
                b: 'B'
              }
            ]
          }
        }
      }
    });
    result = polyjs.debug.groupProcessedData(data, ['y', 'b']);
    return deepEqual(result, {
      grouped: true,
      key: 'y',
      values: {
        1: {
          grouped: true,
          key: 'b',
          values: {
            A: {
              1: {
                metaData: data[1].metaData,
                statData: [
                  {
                    x: 1,
                    b: 'A'
                  }, {
                    x: 1,
                    b: 'A'
                  }
                ]
              },
              2: {
                metaData: data[2].metaData,
                statData: [
                  {
                    y: 1,
                    b: 'A'
                  }, {
                    y: 1,
                    b: 'A'
                  }
                ]
              }
            },
            B: {
              1: {
                metaData: data[1].metaData,
                statData: [
                  {
                    x: 1,
                    b: 'B'
                  }
                ]
              },
              2: {
                metaData: data[2].metaData,
                statData: []
              }
            }
          }
        },
        2: {
          grouped: true,
          key: 'b',
          values: {
            A: {
              1: {
                metaData: data[1].metaData,
                statData: [
                  {
                    x: 1,
                    b: 'A'
                  }, {
                    x: 1,
                    b: 'A'
                  }
                ]
              },
              2: {
                metaData: data[2].metaData,
                statData: []
              }
            },
            B: {
              1: {
                metaData: data[1].metaData,
                statData: [
                  {
                    x: 1,
                    b: 'B'
                  }
                ]
              },
              2: {
                metaData: data[2].metaData,
                statData: [
                  {
                    y: 2,
                    b: 'B'
                  }
                ]
              }
            }
          }
        }
      }
    });
  });

  test("utils.cross", function() {
    var y;

    y = polyjs.debug.cross({
      x: [1, 2, 3],
      y: [1, 2]
    });
    deepEqual(y.length, 6);
    y = polyjs.debug.cross({
      x: [1, 2, 3]
    });
    deepEqual(y.length, 3);
    y = polyjs.debug.cross({
      x: []
    });
    deepEqual(y.length, 0);
    y = polyjs.debug.cross({});
    return deepEqual(y.length, 1);
  });

  test("stingify", function() {
    var y;

    y = polyjs.debug.stringify(['a', 'b'])({
      x: 2,
      a: 2,
      b: 3
    });
    equal(y, "a:2;b:3;");
    y = polyjs.debug.stringify(['a'])({
      x: 2,
      a: 2,
      b: 3
    });
    equal(y, "a:2;");
    y = polyjs.debug.stringify([])({
      x: 2,
      a: 2,
      b: 3
    });
    return equal(y, "");
  });

  test("intersect", function() {
    var result;

    result = polyjs.debug.intersect({
      hour: {
        "in": ['diran', 'was', 'here']
      }
    }, {
      hour: {
        "in": ['diran', 'was', 'here', 'today']
      }
    });
    deepEqual(result.hour["in"].length, 3);
    result = polyjs.debug.intersect({
      hour: {
        gt: 3,
        le: 5
      }
    }, {
      hour: {
        ge: 4,
        lt: 8
      }
    });
    deepEqual(result.hour.ge, 4);
    return deepEqual(result.hour.le, 5);
  });

}).call(this);
